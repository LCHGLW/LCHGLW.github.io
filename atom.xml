<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.imlch.cn/"/>
  <updated>2020-08-29T16:46:10.319Z</updated>
  <id>http://blog.imlch.cn/</id>
  
  <author>
    <name>imlch</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="http://blog.imlch.cn/2020/09/05/Note200829/"/>
    <id>http://blog.imlch.cn/2020/09/05/Note200829/</id>
    <published>2020-09-05T10:12:11.131Z</published>
    <updated>2020-08-29T16:46:10.319Z</updated>
    
    <content type="html"><![CDATA[<p>##Xpath</p><p>xpath如何取包含多个class属性</p><p>但是如果html是</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">div class="test demo"&gt;<span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"demo test"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"test demo2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果目标 class 不一定是第一个，那么：</p><blockquote><p>//div[contains(concat(‘ ‘, @class, ‘ ‘), ‘demo’)]     ##只想选出有demo这个class的对象</p></blockquote><p>取多个class属性值的元素</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">'a b'</span>&gt;</span>test<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>可以用如下的表达式：</p><blockquote><p>xpath(‘//div[contains(@class,”a”)]’)  #它会取得所有class为a的元素</p></blockquote><blockquote><p>xpath(‘//div[contains(@class,”a”) and contains(@class,”b”)]’) #它会取class同时有a和b的元素</p></blockquote><p>##应对反爬虫措施解决方案</p><h3 id="user-agent-伪装和轮换"><a href="#user-agent-伪装和轮换" class="headerlink" title="user_agent 伪装和轮换"></a>user_agent 伪装和轮换</h3><p>不同浏览器的不同版本都有不同的user_agent，是浏览器类型的详细信息，也是浏览器提交Http请求的重要头部信息。我们可以在每次请求的时候提供不同的user_agent，绕过网站检测客户端的反爬虫机制。比如说，可以把很多的user_agent放在一个列表中，每次随机选一个用于提交访问请求。有一个提供各种user_agent的网站：</p><p><a href="http://www.useragentstring.com/" target="_blank" rel="noopener">http://www.useragentstring.com/</a></p><p>最近又看到一个专门提供伪装浏览器身份的开源库，名字取得很直白：</p><p><a href="https://github.com/hellysmile/fake-useragent" target="_blank" rel="noopener">fake-useragent</a></p><h3 id="使用代理IP和轮换"><a href="#使用代理IP和轮换" class="headerlink" title="使用代理IP和轮换"></a>使用代理IP和轮换</h3><p>检查ip的访问情况是网站的反爬机制最喜欢也最喜欢用的方式。这种时候就可以更换不同的ip地址来爬取内容。当然，你有很多有公网ip地址的主机或者vps是更好的选择，如果没有的话就可以考虑使用代理，让代理服务器去帮你获得网页内容，然后再转发回你的电脑。代理按透明度可以分为透明代理、匿名代理和高度匿名代理:</p><ul><li><strong>透明代理</strong>：目标网站知道你使用了代理并且知道你的源IP地址，这种代理显然不符合我们这里使用代理的初衷</li><li><strong>匿名代理</strong>：匿名程度比较低，也就是网站知道你使用了代理，但是并不知道你的源IP地址</li><li><strong>高匿代理</strong>：这是最保险的方式，目标网站既不知道你使用的代理更不知道你的源IP<br>代理的获取方式可以去购买，当然也可以去自己爬取免费的，<a href="http://www.xicidaili.com/nn/" target="_blank" rel="noopener">这里</a>有一个提供免费代理的网站，可以爬下来使用，但是免费的代理通常不够稳定。</li></ul><h3 id="设置访问时间间隔"><a href="#设置访问时间间隔" class="headerlink" title="设置访问时间间隔"></a>设置访问时间间隔</h3><p>很多网站的反爬虫机制都设置了访问间隔时间，一个IP如果短时间内超过了指定的次数就会进入“冷却CD”，所以除了轮换IP和user_agent<br>可以设置访问的时间间间隔长一点，比如没抓取一个页面休眠一个随机时间：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time，random</span><br><span class="line">time.sleep(random.random()*<span class="number">3</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;##Xpath&lt;/p&gt;
&lt;p&gt;xpath如何取包含多个class属性&lt;/p&gt;
&lt;p&gt;但是如果html是&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;li
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://blog.imlch.cn/2020/08/29/LeetCode101/"/>
    <id>http://blog.imlch.cn/2020/08/29/LeetCode101/</id>
    <published>2020-08-29T10:09:34.691Z</published>
    <updated>2020-08-29T10:21:23.975Z</updated>
    
    <content type="html"><![CDATA[<h2 id="对称二叉树"><a href="#对称二叉树" class="headerlink" title="对称二叉树"></a>对称二叉树</h2><p><img src="https://pic.leetcode-cn.com/7f7978d0887dc8059d7058ebd60333160ab3fd0a7de39cbf559edec319ba6c49-image-20200514180949390.png" alt="image-20200514180949390.png"></p><p>###思路—分治法</p><p>如果满足条件的对称二叉树</p><p>其左子树的前序遍历  &amp;&amp;  右子树的后序遍历 </p><p>得到的列表必然完全相反</p><p>左子树进行前序遍历: pre_order = [2,3,5,6,4,7,8]       后序遍历：post_order = [8,7,4,6,5,3,2]</p><p>pre==post.reverse</p><p>###代码</p><ul><li>按照总结的二叉树遍历模板</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">traverse</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 前序遍历</span></span><br><span class="line">    traverse(root.left)</span><br><span class="line">    <span class="comment">// 中序遍历</span></span><br><span class="line">    traverse(root.right)</span><br><span class="line">    <span class="comment">// 后序遍历</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>分别定义前序和后序遍历的函数</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pre_order</span><span class="params">(self,root,li)</span>:</span>    <span class="comment"># 二叉树的前序遍历</span></span><br><span class="line">    <span class="keyword">if</span> root:</span><br><span class="line">        li.append(root.val)</span><br><span class="line">        self.pre_order(root.left,li)</span><br><span class="line">        self.pre_order(root.right,li)</span><br><span class="line">    <span class="keyword">elif</span> root == <span class="keyword">None</span>:</span><br><span class="line">        li.append(<span class="keyword">None</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">post_order</span><span class="params">(self,root,li)</span>:</span>   <span class="comment"># 二叉树的后序遍历</span></span><br><span class="line">    <span class="keyword">if</span> root:</span><br><span class="line">        self.post_order(root.left,li)</span><br><span class="line">        self.post_order(root.right,li)</span><br><span class="line">        li.append(root.val)</span><br><span class="line">    <span class="keyword">elif</span> root == <span class="keyword">None</span>:</span><br><span class="line">        li.append(<span class="keyword">None</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isSymmetric</span><span class="params">(self, root: TreeNode)</span> -&gt; bool:</span></span><br><span class="line">        pre = []     <span class="comment"># 用来存左子树的前序遍历</span></span><br><span class="line">        post = []     <span class="comment"># 用来存右子树的后序遍历</span></span><br><span class="line">        <span class="keyword">if</span> root == <span class="keyword">None</span>:   <span class="comment"># 无根节点</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">        <span class="keyword">if</span> root <span class="keyword">and</span> root.left == <span class="keyword">None</span> <span class="keyword">and</span> root.right == <span class="keyword">None</span>:  <span class="comment"># 只有根节点</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> root <span class="keyword">and</span> root.left <span class="keyword">and</span> root.right:</span><br><span class="line">            self.pre_order(root.left, pre)</span><br><span class="line">            self.post_order(root.right, post)</span><br><span class="line">            post.reverse()            <span class="comment"># 将后序遍历的列表倒序</span></span><br><span class="line">            <span class="keyword">if</span> pre == post:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">False</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;对称二叉树&quot;&gt;&lt;a href=&quot;#对称二叉树&quot; class=&quot;headerlink&quot; title=&quot;对称二叉树&quot;&gt;&lt;/a&gt;对称二叉树&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://pic.leetcode-cn.com/7f7978d0887dc8059d70
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://blog.imlch.cn/2020/08/23/yield/"/>
    <id>http://blog.imlch.cn/2020/08/23/yield/</id>
    <published>2020-08-23T10:25:30.539Z</published>
    <updated>2020-08-23T16:30:52.619Z</updated>
    
    <content type="html"><![CDATA[<h2 id="关键字yield"><a href="#关键字yield" class="headerlink" title="关键字yield"></a>关键字yield</h2><p>首先直观上等价于return，其次可看作生成器的一部分，（带有yield的函数，会被解释器视为一个迭代器，返回iterable对象）</p><h3 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fab</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, max)</span>:</span></span><br><span class="line">        self.max = max</span><br><span class="line">        self.n, self.a, self.b = <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__iter__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">next</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.n &lt; self.max:</span><br><span class="line">            r = self.b</span><br><span class="line">            self.a, self.b = self.b, self.a + self.b</span><br><span class="line">            self.n = self.n + <span class="number">1</span></span><br><span class="line">            <span class="keyword">return</span> r</span><br><span class="line">        <span class="keyword">raise</span> StopIteration()</span><br></pre></td></tr></table></figure><ul><li>判断函数是否为特殊的 generator 函数—isgeneratorfunction</li><li></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;关键字yield&quot;&gt;&lt;a href=&quot;#关键字yield&quot; class=&quot;headerlink&quot; title=&quot;关键字yield&quot;&gt;&lt;/a&gt;关键字yield&lt;/h2&gt;&lt;p&gt;首先直观上等价于return，其次可看作生成器的一部分，（带有yield的函数，会被解释器视
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://blog.imlch.cn/2020/08/20/Timsort/"/>
    <id>http://blog.imlch.cn/2020/08/20/Timsort/</id>
    <published>2020-08-20T12:20:40.877Z</published>
    <updated>2020-08-22T12:09:19.704Z</updated>
    
    <content type="html"><![CDATA[<h2 id="sort-和sorted"><a href="#sort-和sorted" class="headerlink" title="sort()和sorted()"></a>sort()和sorted()</h2><p>区别介绍</p><ul><li><p>sort 是应用在 list 上的方法，针对原list排序无返回值</p></li><li><p>sorted 是内建函数，可对所有可迭代的对象进行排序操作，会返回新的list</p></li></ul><h2 id="内部实现探究"><a href="#内部实现探究" class="headerlink" title="内部实现探究"></a>内部实现探究</h2><ol><li><p><a href="https://www.zhihu.com/question/36280272" target="_blank" rel="noopener">（知乎）python sort 函数采用的排序算法</a> ：其中一个回答提到了 python 中的 sorted 排序内部实现是 timsort，并没有说 sort 。</p></li><li><p><a href="https://github.com/qiwsir/algorithm/commit/68f1af0cfe3df4a96abc528cd324f5f69f4eb9df" target="_blank" rel="noopener">（GitHub）python的sorted排序分析</a> ： 同样只提到了 python 中的 sorted 排序内部实现是 timsort，并没有说 sort （知乎回答的一个链接）。</p></li><li><p>（CSDN）<a href="https://blog.csdn.net/liusarazhang/article/details/52797328" target="_blank" rel="noopener">C++，java,Python的内部实现sort怎么实现的</a> ：内容提到 python内部的sort采用的是混合（hybrid）排序，规模小的时候采用 <a href="https://blog.csdn.net/caroline_wendy/article/details/24001053" target="_blank" rel="noopener">binary insertion</a>，规模大的时候采用 <a href="https://en.wikipedia.org/wiki/Samplesort" target="_blank" rel="noopener">sample sort</a> 。</p></li></ol><p>###结论：实现机制—Timsort  时间复杂度O(nlogn)     空间复杂度O（n）</p><h2 id="Timsort"><a href="#Timsort" class="headerlink" title="Timsort"></a>Timsort</h2><p> Timsort是结合了合并排序（merge sort）和插入排序（insertion sort）的排序算法，由Tim Peters在2002年设计了该算法并在Python中使用（TimSort 是 Python 中 list.sort 的默认实现）。Pyhton自从2.3版以来一直采用Timsort算法排序，现在Java SE7和Android也采用Timsort算法</p><h3 id="基本流程"><a href="#基本流程" class="headerlink" title="基本流程"></a>基本流程</h3><p>基本工作过程是：</p><ul><li>扫描数组，确定其中的单调上升段和严格单调下降段，将严格下降段反转。我们将这样的段称之为run。</li><li>定义最小run长度，短于此的run通过插入排序合并为长度高于最小run长度；</li><li>反复归并一些相邻run，过程中需要避免归并长度相差很大的run，直至整个排序完成；</li><li>如何避免归并长度相差很大run呢， 依次将run压入栈中，若栈顶run X，run Y，run Z 的长度违反了<strong>X&gt;Y+Z 或 Y&gt;Z</strong> 则Y run与较小长度的run合并，并再次放入栈中。 依据这个法则，能够尽量使得大小相同的run合并，以提高性能。注意Timsort是稳定排序故只有相邻的run才能归并。</li><li>Merge操作还可以辅之以galloping模型（记录归并时run的界值，如runA完全小于或大于runB直接合并，提升归并效率</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>timsort是工业级算法，其混用插入排序与归并排序，二分搜索等算法</p><p>充分利用待排序数据可能部分有序的事实，并且依据待排序数据内容动态改变排序策略——选择性进行归并以及galloping</p><p>Timsort是稳定的算法，当待排序的数组中已经有排序好的数，它的时间复杂度会小于n logn。Timesrot稳定（最坏和平均时间一致），时间复杂度是O（n log n）。在最坏情况下，Timsort算法需要的临时空间是n/2，在最好情况下，它只需要一个很小的临时存储空间</p><h2 id="TimSort–python实现"><a href="#TimSort–python实现" class="headerlink" title="TimSort–python实现"></a>TimSort–python实现</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">二分搜索用于插入排序寻找插入位置</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">binary_search</span><span class="params">(the_array, item, start, end)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> start == end:</span><br><span class="line">        <span class="keyword">if</span> the_array[start] &gt; item:</span><br><span class="line">            <span class="keyword">return</span> start</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> start + <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> start &gt; end:</span><br><span class="line">        <span class="keyword">return</span> start</span><br><span class="line"></span><br><span class="line">    mid = round((start + end)/ <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> the_array[mid] &lt; item:</span><br><span class="line">        <span class="keyword">return</span> binary_search(the_array, item, mid + <span class="number">1</span>, end)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">elif</span> the_array[mid] &gt; item:</span><br><span class="line">        <span class="keyword">return</span> binary_search(the_array, item, start, mid - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> mid</span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">插入排序用于生成mini run</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">insertion_sort</span><span class="params">(the_array)</span>:</span></span><br><span class="line">   </span><br><span class="line">    l = len(the_array)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> index <span class="keyword">in</span> range(<span class="number">1</span>, l):</span><br><span class="line">        value = the_array[index]</span><br><span class="line">        pos = binary_search(the_array, value, <span class="number">0</span>, index - <span class="number">1</span>)</span><br><span class="line">        the_array[pos+<span class="number">1</span>:index+<span class="number">1</span>] = the_array[pos:index]</span><br><span class="line">        the_array[pos] = value</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">return</span> the_array</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">归并，将两个有序的list合并成新的有序list</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">merge</span><span class="params">(left, right)</span>:</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> left:</span><br><span class="line">        <span class="keyword">return</span> right</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> right:</span><br><span class="line">        <span class="keyword">return</span> left</span><br><span class="line">    l_len = len(left)</span><br><span class="line">    r_len = len(right)</span><br><span class="line">    result = [<span class="keyword">None</span>]*(l_len+r_len)</span><br><span class="line">    i, j, k= <span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> i &lt; l_len <span class="keyword">and</span> j&lt; r_len:</span><br><span class="line">        <span class="keyword">if</span> left[i] &lt;= right[j]:</span><br><span class="line">            result[k] = left[i]</span><br><span class="line">            i+=<span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            result[k] = right[j]</span><br><span class="line">            j+=<span class="number">1</span></span><br><span class="line">        k+=<span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> i&lt;l_len:</span><br><span class="line">        result[k]=left[i];</span><br><span class="line">        k+=<span class="number">1</span></span><br><span class="line">        i+=<span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> j&lt;r_len:</span><br><span class="line">        result[k]=right[j]</span><br><span class="line">        k+=<span class="number">1</span></span><br><span class="line">        j+=<span class="number">1</span></span><br><span class="line">   </span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">     </span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">timsort</span><span class="params">(the_array)</span>:</span></span><br><span class="line">    runs = []</span><br><span class="line">    length = len(the_array)</span><br><span class="line">    new_run = [the_array[<span class="number">0</span>]]</span><br><span class="line">    new_run_reverse = <span class="keyword">False</span></span><br><span class="line">    <span class="comment"># 将the_array拆分成多了(递增或严格递减)list并将严格递减的list反转后存入runs。</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, length):</span><br><span class="line">       </span><br><span class="line">        <span class="keyword">if</span> len(new_run) == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">if</span> the_array[i] &lt; the_array[i<span class="number">-1</span>]:</span><br><span class="line">                new_run_reverse = <span class="keyword">True</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                new_run_reverse = <span class="keyword">False</span></span><br><span class="line">            new_run.append(the_array[i])</span><br><span class="line">                </span><br><span class="line">        <span class="keyword">elif</span> new_run_reverse:</span><br><span class="line">            <span class="keyword">if</span> the_array[i] &lt; the_array[i<span class="number">-1</span>]:</span><br><span class="line">                new_run.append(the_array[i])</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                new_run.reverse()</span><br><span class="line">                runs.append(new_run)</span><br><span class="line">                <span class="comment">#print(new_run)</span></span><br><span class="line">                new_run=[]</span><br><span class="line">                new_run.append(the_array[i])</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> the_array[i] &gt;= the_array[i<span class="number">-1</span>]:</span><br><span class="line">                new_run.append(the_array[i])</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                runs.append(new_run)</span><br><span class="line">                <span class="comment">#print(new_run)</span></span><br><span class="line">                new_run=[]</span><br><span class="line">                new_run.append(the_array[i])</span><br><span class="line">       </span><br><span class="line">        <span class="keyword">if</span> i == length - <span class="number">1</span>:</span><br><span class="line">            runs.append(new_run)</span><br><span class="line">            <span class="comment">#print(new_run)</span></span><br><span class="line"></span><br><span class="line">    mini_run = <span class="number">32</span></span><br><span class="line">    sorted_runs=[]</span><br><span class="line">    cur_run=[]</span><br><span class="line">    <span class="comment"># 对runs中的每一项list长度不足mini_run用插入排序进行扩充，存入sorted_runs</span></span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> runs:</span><br><span class="line">        <span class="keyword">if</span> len(cur_run) &gt; mini_run:</span><br><span class="line">            sorted_runs.append(insertion_sort(cur_run))</span><br><span class="line">            cur_run = item</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            cur_run.extend(item)</span><br><span class="line">      </span><br><span class="line">    sorted_runs.append(insertion_sort(cur_run))</span><br><span class="line">    </span><br><span class="line">   </span><br><span class="line">    <span class="comment"># 依次将run压入栈中，若栈顶run X，Y，Z。</span></span><br><span class="line">    <span class="comment"># 违反了X&gt;Y+Z 或 Y&gt;Z 则Y与较小长度的run合并，并再次放入栈中。</span></span><br><span class="line">    <span class="comment"># 依据这个法则，能够尽量使得大小相同的run合并，以提高性能。</span></span><br><span class="line">    <span class="comment"># Timsort是稳定排序故只有相邻的run才能归并。</span></span><br><span class="line">    run_stack = []</span><br><span class="line">    sorted_array = []</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> run <span class="keyword">in</span> sorted_runs:</span><br><span class="line">        run_stack.append(run)</span><br><span class="line">        stop = <span class="keyword">False</span></span><br><span class="line">        <span class="keyword">while</span> len(run_stack) &gt;= <span class="number">3</span> <span class="keyword">and</span> <span class="keyword">not</span> stop:</span><br><span class="line">            </span><br><span class="line">            X = run_stack[len(run_stack)<span class="number">-1</span>]</span><br><span class="line">            Y = run_stack[len(run_stack)<span class="number">-2</span>]</span><br><span class="line">            Z = run_stack[len(run_stack)<span class="number">-3</span>]</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">not</span> len(X)&gt;len(Y)+len(Z)) <span class="keyword">or</span> (<span class="keyword">not</span> len(Y)&gt;len(Z)):</span><br><span class="line">                run_stack.pop()</span><br><span class="line">                run_stack.pop()</span><br><span class="line">                run_stack.pop()</span><br><span class="line">                <span class="keyword">if</span> len(X) &lt; len(Z):</span><br><span class="line">                    YX = merge(Y,X)</span><br><span class="line">                    run_stack.append(Z)</span><br><span class="line">                    run_stack.append(YX)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    ZY = merge(Z,Y)</span><br><span class="line">                    run_stack.append(ZY)</span><br><span class="line">                    run_stack.append(X)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                stop =<span class="keyword">True</span></span><br><span class="line">            </span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">    <span class="comment">#将栈中剩余的run归并</span></span><br><span class="line">    <span class="keyword">for</span> run <span class="keyword">in</span> run_stack:</span><br><span class="line">        sorted_array = merge(sorted_array, run)</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">    <span class="comment">#print(sorted_array)</span></span><br><span class="line"></span><br><span class="line">data = []</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">100</span>):</span><br><span class="line">    data.append(random.randint(<span class="number">0</span>,<span class="number">10000</span>))</span><br><span class="line"></span><br><span class="line">start = time.process_time()</span><br><span class="line">timsort(data)</span><br><span class="line">end = time.process_time()</span><br><span class="line">print(end-start)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;sort-和sorted&quot;&gt;&lt;a href=&quot;#sort-和sorted&quot; class=&quot;headerlink&quot; title=&quot;sort()和sorted()&quot;&gt;&lt;/a&gt;sort()和sorted()&lt;/h2&gt;&lt;p&gt;区别介绍&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;sor
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://blog.imlch.cn/2020/08/15/LeetCode93/"/>
    <id>http://blog.imlch.cn/2020/08/15/LeetCode93/</id>
    <published>2020-08-15T10:37:35.600Z</published>
    <updated>2020-08-15T10:40:33.416Z</updated>
    
    <content type="html"><![CDATA[<p>##思路</p><ul><li><p>res List[str]：记录当前已被分隔的字符串，初始值为 [s]，未做分隔</p></li><li><p>for 循环 3 次，每次给 res 中所有字符串加一个 ‘.’，多分隔出一个整数，例如 [“2552551135”] 一次循环之后，变成 [“2.552551135”, “25.52551135”, “255.2551135”]，分隔出了一个合法整数</p></li><li><p>然后在最后面的那串又加 ‘.’，继续分隔，维护好加 ‘.’ 分隔的位置</p></li><li>添加三个 ‘.’ 后，分隔出的前三个整数都已满足条件，只需检验一下分隔出的最后一个整数即可，若满足条件，则四个整数都满足条件</li></ul><p>##代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">validInt</span><span class="params">(self, s)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> s <span class="keyword">and</span> int(s) &lt; <span class="number">256</span>:</span><br><span class="line">            <span class="keyword">if</span> s[<span class="number">0</span>] != <span class="string">'0'</span> <span class="keyword">or</span> s == <span class="string">'0'</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">restoreIpAddresses</span><span class="params">(self, s: str)</span>:</span></span><br><span class="line">    res = [s]</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">        res_now = []</span><br><span class="line">        <span class="keyword">for</span> si <span class="keyword">in</span> res:</span><br><span class="line">            last = si.split(<span class="string">'.'</span>)[<span class="number">-1</span>]</span><br><span class="line">            idx = len(si) - len(last)</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(len(last)):</span><br><span class="line">                <span class="keyword">if</span> i &gt; <span class="number">2</span>:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                <span class="keyword">if</span> int(last[:i + <span class="number">1</span>]) &lt; <span class="number">256</span>:</span><br><span class="line">                    si_now = si[: idx + i + <span class="number">1</span>] + <span class="string">'.'</span> + si[idx + i + <span class="number">1</span> :]</span><br><span class="line">                    res_now.append(si_now)</span><br><span class="line">                <span class="keyword">if</span> last[<span class="number">0</span>] == <span class="string">'0'</span>:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">        res = res_now</span><br><span class="line"></span><br><span class="line">    res_now = []</span><br><span class="line">    <span class="keyword">for</span> si <span class="keyword">in</span> res:</span><br><span class="line">        last = si.split(<span class="string">'.'</span>)[<span class="number">-1</span>]</span><br><span class="line">        <span class="keyword">if</span> self.validInt(last):</span><br><span class="line">            res_now.append(si)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res_now</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;##思路&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;res List[str]：记录当前已被分隔的字符串，初始值为 [s]，未做分隔&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;for 循环 3 次，每次给 res 中所有字符串加一个 ‘.’，多分隔出一个整数，例如 [“2552551135”
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://blog.imlch.cn/2020/08/15/LeetCode99/"/>
    <id>http://blog.imlch.cn/2020/08/15/LeetCode99/</id>
    <published>2020-08-15T10:18:26.883Z</published>
    <updated>2020-08-15T10:38:20.001Z</updated>
    
    <content type="html"><![CDATA[<p>##方法一：显式中序遍历</p><p>###思路与算法</p><p>对于二叉搜索树进行中序遍历，得到的值序列是递增有序的；对于两个错误的节点等价于在这个值序列中交换了两个值，破坏了值序列的递增性。那么序列中就会出现两个位置不满足或者一个位置不满足递增的两种情况</p><p>###解决方案</p><ul><li>中序递归遍历整个树，当 pre 节点值大于当前节点，记录这两个节点。</li><li>判断逆序对节点数是2个还是4个，如果是2两个，交换即可，如果是4个，则交换第1个和第4个。</li></ul><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">recoverTree</span><span class="params">(self, root: TreeNode)</span> -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Do not return anything, modify root in-place instead.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">_inorder</span><span class="params">(root)</span>:</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> root: <span class="keyword">return</span></span><br><span class="line">            <span class="comment"># 遍历左子树</span></span><br><span class="line">            _inorder(root.left)</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">nonlocal</span> pre, nodes</span><br><span class="line">            <span class="keyword">if</span> pre <span class="keyword">and</span> pre.val &gt; root.val:  <span class="comment"># 记录当前的逆序对</span></span><br><span class="line">                nodes.append(pre)</span><br><span class="line">                nodes.append(root)</span><br><span class="line">            pre = root</span><br><span class="line">            <span class="comment"># 遍历右子树</span></span><br><span class="line">            _inorder(root.right)</span><br><span class="line"></span><br><span class="line">        pre = <span class="keyword">None</span></span><br><span class="line">        nodes = []</span><br><span class="line">        _inorder(root)</span><br><span class="line">        <span class="keyword">if</span> len(nodes) == <span class="number">2</span>:</span><br><span class="line">            i, j = <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> len(nodes) == <span class="number">4</span>:</span><br><span class="line">            i, j = <span class="number">0</span>, <span class="number">3</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        nodes[i].val, nodes[j].val = nodes[j].val, nodes[i].val</span><br><span class="line">        <span class="keyword">return</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;##方法一：显式中序遍历&lt;/p&gt;
&lt;p&gt;###思路与算法&lt;/p&gt;
&lt;p&gt;对于二叉搜索树进行中序遍历，得到的值序列是递增有序的；对于两个错误的节点等价于在这个值序列中交换了两个值，破坏了值序列的递增性。那么序列中就会出现两个位置不满足或者一个位置不满足递增的两种情况&lt;/p&gt;

      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://blog.imlch.cn/2020/08/15/LeetCode100/"/>
    <id>http://blog.imlch.cn/2020/08/15/LeetCode100/</id>
    <published>2020-08-15T09:39:26.995Z</published>
    <updated>2020-08-15T09:57:38.461Z</updated>
    
    <content type="html"><![CDATA[<p>##整体思路</p><ul><li>两个树相同，中根遍历肯定相同；中根遍历相同，两个树就一定相同？不一定，比如这种情况，中根遍历都是 [1,2]</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入:      1          1</span><br><span class="line">          /           \</span><br><span class="line">         2             2</span><br></pre></td></tr></table></figure><ul><li><p>如果中根遍历，先根遍历，后根遍历均相同，那肯定是相同的树。但遍历 3 遍，时间复杂度太高。这道题是简单，显然不会这么复杂</p></li><li><p>中根遍历只记录非空「值」，如果将没有空节点也记录，可以通过判断遍历结果（[1,2,null], [1,null,2]）是否相同来判断两个树是否相同。解法一：通过遍历结果是否相同来判断。</p></li><li><p>解法二：通过两个数组是否完全相同来判断，其实也是依次判断每一个元素是否相同，如果都相同，则最终结果相同。依次判断每一个节点是否相同，相同为 true，不同为 false，存在 false，则最后结果为 false。</p></li></ul><p>###解法一：通过判断遍历结果是否相同<br>时间复杂度：O(N)，递归栈的深度为节点的数量（N）<br>空间复杂度：O(N)，需要一个额外长度为 N 的数组（不考虑叶子节点为 null 的情况）</p><p>###代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isSameTree</span><span class="params">(self, p: TreeNode, q: TreeNode)</span> -&gt; bool:</span></span><br><span class="line">        arrp,arrq = [],[]</span><br><span class="line">        self.traversal(p,arrp)</span><br><span class="line">        self.traversal(q,arrq)</span><br><span class="line">        <span class="keyword">return</span> arrp == arrq</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">traversal</span><span class="params">(self, root: TreeNode, arr: List[int])</span>:</span></span><br><span class="line">    <span class="keyword">if</span> root == <span class="keyword">None</span>:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    arr.append(root.val)</span><br><span class="line">    <span class="keyword">if</span> root.left != <span class="keyword">None</span>:</span><br><span class="line">        self.traversal(root.left,arr)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        arr.append(<span class="keyword">None</span>)</span><br><span class="line">    <span class="keyword">if</span> root.right != <span class="keyword">None</span>:</span><br><span class="line">        self.traversal(root.right,arr)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        arr.append(<span class="keyword">None</span>)</span><br></pre></td></tr></table></figure><p>###解法二：依次判断每一个节点是否相同<br>时间复杂度：O(N)，递归栈的深度为节点的数量（N）<br>空间复杂度：O(1)，不需要额外的空间</p><p>###代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isSameTree</span><span class="params">(self, p: TreeNode, q: TreeNode)</span> -&gt; bool:</span></span><br><span class="line">        <span class="keyword">if</span> p == <span class="keyword">None</span> <span class="keyword">and</span> q == <span class="keyword">None</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">        <span class="keyword">if</span> p == <span class="keyword">None</span> <span class="keyword">or</span> q == <span class="keyword">None</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">        <span class="keyword">if</span> p.val != q.val:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">        <span class="keyword">return</span> self.isSameTree(p.left,q.left) <span class="keyword">and</span> self.isSameTree(p.right,q.right)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;##整体思路&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;两个树相同，中根遍历肯定相同；中根遍历相同，两个树就一定相同？不一定，比如这种情况，中根遍历都是 [1,2]&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td clas
      
    
    </summary>
    
    
  </entry>
  
</feed>
